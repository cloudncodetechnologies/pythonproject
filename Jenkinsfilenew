pipeline {
    agent any
    parameters {
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Specify the environment for deployment')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: "Run Tests in pipeline")
    
    }
    environment {
       SERVER_IP = credentials('prod-server-ip')
    }


    stages {


        stage('Git Checkout') {
            steps {
                 git branch: 'main', credentialsId: '1b256f95-2b17-4dfa-b6a6-9be1b3d86afd', url: 'https://github.com/cloudncodetechnologies/pythonproject.git'
            }
            
        }
        stage('Setup') {
            steps {
                sh 'python3 -m venv venv'
                sh 'bash -c "source venv/bin/activate && pip install -r requirements.txt"'
            }
            
        }
        stage('Unit test') {
            when {
                expression {
                    params.RUN_TESTS == true
                }
            }
            steps {
                echo "testing application"
                sh 'bash -c "source venv/bin/activate && pytest"'
                
            }
        }
        stage('Package code') {
            steps {
                sh "zip -r myapp.zip ./* -x '*.git*'"
                sh "ls -lart"
            }
        }

        stage('Deploy to Prod') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'prod-server-ssh', keyFileVariable: 'MY_SSH_KEY', usernameVariable: 'username')]) {
                    sh '''
                    scp -i $MY_SSH_KEY -o StrictHostKeyChecking=no myapp.zip  ${username}@${SERVER_IP}:/home/ubuntu/
                    ssh -i $MY_SSH_KEY -o StrictHostKeyChecking=no ${username}@${SERVER_IP} << EOF
                        unzip -o /home/ubuntu/myapp.zip -d /home/ubuntu/pythonproject/
                        source /home/ubuntu/pythonproject/venv/bin/activate
                        cd /home/ubuntu/pythonproject/
                        pip install -r requirements.txt
                        sudo systemctl restart flaskapp.service
EOF
                    '''
                }
            }
        }         
            
    }
}
